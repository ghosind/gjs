package syntax

import (
	"testing"

	"github.com/ghosind/go-assert"
)

var tokenTestCases []struct {
	Source string
	Token  TokenType
} = []struct {
	Source string
	Token  TokenType
}{
	{"", TOKEN_EOF},
	{"(", TOKEN_LEFT_PAREN},
	{")", TOKEN_RIGHT_PAREN},
	{"{", TOKEN_LEFT_BRACE},
	{"}", TOKEN_RIGHT_BRACE},
	{"[", TOKEN_LEFT_BRACKET},
	{"]", TOKEN_RIGHT_BRACKET},
	{"&", TOKEN_AND},
	{"&&", TOKEN_AND_AND},
	{"&&=", TOKEN_AND_AND_EQUAL},
	{"&=", TOKEN_AND_EQUAL},
	{"!", TOKEN_BANG},
	{"!=", TOKEN_BANG_EQUAL},
	{"!==", TOKEN_BANG_EQUAL_EQUAL},
	{":", TOKEN_COLON},
	{",", TOKEN_COMMA},
	{".", TOKEN_DOT},
	{"...", TOKEN_DOT_DOT_DOT},
	{"=", TOKEN_EQUAL},
	{"==", TOKEN_EQUAL_EQUAL},
	{"===", TOKEN_EQUAL_EQUAL_EQUAL},
	{">", TOKEN_GREATER},
	{">=", TOKEN_GREATER_EQUAL},
	{">>", TOKEN_GREATER_GREATER},
	{">>=", TOKEN_GREATER_GREATER_EQUAL},
	{">>>", TOKEN_GREATER_GREATER_GREATER},
	{">>>=", TOKEN_GREATER_GREATER_GREATER_EQUAL},
	{"#", TOKEN_HASH},
	{"#!", TOKEN_HASH_BANG},
	{"^", TOKEN_HAT},
	{"^=", TOKEN_HAT_EQUAL},
	{"<", TOKEN_LESS},
	{"<=", TOKEN_LESS_EQUAL},
	{"<<", TOKEN_LESS_LESS},
	{"<<=", TOKEN_LESS_LESS_EQUAL},
	{"-", TOKEN_MINUS},
	{"-=", TOKEN_MINUS_EQUAL},
	{"--", TOKEN_MINUS_MINUS},
	{"%", TOKEN_PERCENT},
	{"%=", TOKEN_PERCENT_EQUAL},
	{"|", TOKEN_PIPE},
	{"|=", TOKEN_PIPE_EQUAL},
	{"||", TOKEN_PIPE_PIPE},
	{"||=", TOKEN_PIPE_PIPE_EQUAL},
	{"+", TOKEN_PLUS},
	{"+=", TOKEN_PLUS_EQUAL},
	{"++", TOKEN_PLUS_PLUS},
	{"?", TOKEN_QUESTION},
	{"?.", TOKEN_QUESTION_DOT},
	{"??", TOKEN_QUESTION_QUESTION},
	{"??=", TOKEN_QUESTION_QUESTION_EQUAL},
	{";", TOKEN_SEMICOLON},
	{"/", TOKEN_SLASH},
	{"/=", TOKEN_SLASH_EQUAL},
	{"*", TOKEN_STAR},
	{"*=", TOKEN_STAR_EQUAL},
	{"**", TOKEN_STAR_STAR},
	{"**=", TOKEN_STAR_STAR_EQUAL},
	{"~", TOKEN_TILDE},
	{"variable", TOKEN_IDENTIFIER},
	{"\"string\"", TOKEN_STRING},
	{"123", TOKEN_NUMBER},
	{"arguments", TOKEN_ARGUMENTS},
	{"as", TOKEN_AS},
	{"async", TOKEN_ASYNC},
	{"await", TOKEN_AWAIT},
	{"break", TOKEN_BREAK},
	{"case", TOKEN_CASE},
	{"catch", TOKEN_CATCH},
	{"class", TOKEN_CLASS},
	{"const", TOKEN_CONST},
	{"continue", TOKEN_CONTINUE},
	{"debugger", TOKEN_DEBUGGER},
	{"default", TOKEN_DEFAULT},
	{"delete", TOKEN_DELETE},
	{"do", TOKEN_DO},
	{"else", TOKEN_ELSE},
	{"enum", TOKEN_ENUM},
	{"eval", TOKEN_EVAL},
	{"export", TOKEN_EXPORT},
	{"extends", TOKEN_EXTENDS},
	{"false", TOKEN_FALSE},
	{"finally", TOKEN_FINALLY},
	{"for", TOKEN_FOR},
	{"from", TOKEN_FROM},
	{"function", TOKEN_FUNCTION},
	{"get", TOKEN_GET},
	{"if", TOKEN_IF},
	{"implements", TOKEN_IMPLEMENTS},
	{"import", TOKEN_IMPORT},
	{"in", TOKEN_IN},
	{"instanceof", TOKEN_INSTANCEOF},
	{"interface", TOKEN_INTERFACE},
	{"let", TOKEN_LET},
	{"meta", TOKEN_META},
	{"new", TOKEN_NEW},
	{"null", TOKEN_NULL},
	{"of", TOKEN_OF},
	{"package", TOKEN_PACKAGE},
	{"private", TOKEN_PRIVATE},
	{"protected", TOKEN_PROTECTED},
	{"public", TOKEN_PUBLIC},
	{"return", TOKEN_RETURN},
	{"set", TOKEN_SET},
	{"static", TOKEN_STATIC},
	{"super", TOKEN_SUPER},
	{"switch", TOKEN_SWITCH},
	{"target", TOKEN_TARGET},
	{"this", TOKEN_THIS},
	{"throw", TOKEN_THROW},
	{"true", TOKEN_TRUE},
	{"try", TOKEN_TRY},
	{"typeof", TOKEN_TYPEOF},
	{"undefined", TOKEN_UNDEFINED},
	{"var", TOKEN_VAR},
	{"void", TOKEN_VOID},
	{"while", TOKEN_WHILE},
	{"with", TOKEN_WITH},
	{"yield", TOKEN_YIELD},
	{"\n", TOKEN_NEW_LINE},
	{" \t  ", TOKEN_SPACE},
	{"// test", TOKEN_SINGLE_LINE_COMMENT},
	{"/* test */", TOKEN_MULTI_LINE_COMMENT},
}

func TestScanFirstToken(t *testing.T) {
	a := assert.New(t)
	s := new(Scanner)

	for _, test := range tokenTestCases {
		s.Init([]byte(test.Source))
		tokens, err := s.ScanTokens()
		a.NilNow(err)
		a.GteNow(len(tokens), 1)
		a.Equal(tokens[0].ToKenType, test.Token)
	}
}
